clinks -- A RESTful bookmark manager
* Introduction
Clinks is a web app made to manage your bookmarks. It is inspired by
[[http://delicious.com][delicious]], but it focus on providing a RESTful interface to access
your bookmarks. Browsers plugins, CLI access and a simple web frontend
are available.
* Launching
Once the source is downloaded and the system is ASDF-loaded (see
[[http://common-lisp.net/project/asdf/asdf/Configuring-ASDF.html#Configuring-ASDF][the documentation]]), you just have to call =start= to launch clinks,
which will be listening on the port 8080.
* CLI interface
A simple CLI interface (that requires python 2) is available and allow
the following operations:
#+BEGIN_SRC text
clinks.py: possible actions are:
createuser username password
	 create a new user
save url [title [tags [notes]]]
	 save a new url, tags are comma separated values
retrieve [username [tag]]
	 retrive the links of an user (default to your user) matching
	 one or multiple tags
#+END_SRC

For the moment, parameters (username, password, server URL) should be
changed directly in =clinks.py=.
* Browser plugins
Firefox and Chrome plugins provide a simple way to save new bookmarks
to clinks. You can adjust settings (username, password, server url)
through the preference system of the browser
* Accessing the API with curl
If you want to have more control over clinks (or to test things not
yet available in any plugins or interface), you can easily access
the API with =curl= with the following arguments:
#+BEGIN_SRC shell
curl -i -X <Method> <URL>/<Resource>
#+END_SRC

For example:
#+BEGIN_SRC shell
$ curl -i -X DELETE http://foo:bar@localhost:8080/users/foo/links/http://cliki.net
HTTP/1.1 204 No Content
Content-Length: 30
Date: Wed, 15 Jun 2011 21:11:10 GMT
Server: Hunchentoot 1.1.1
Content-Type: text/xml; charset=utf-8
#+END_SRC

When =POST= or =UPDATE= parameters are needed, use =input= as the
parameter name:
#+BEGIN_SRC shell
curl -i -X POST -d "input=<link><url>http://cliki.net</url><tags>lisp</tags></link>" http://foo:bar@localhost:8081/users/foo/links
#+END_SRC
* Resources (API) 
First of all, note that the API described in this section might be a
little outdated compared to the actual API. Refer to the source code
for up-to-date information.

Clinks use three resources:
  1. links
  2. tags
  3. users

** Representations
Every resource is represented using XML. Resource operations and
representations are inspired from [[http://www.peej.co.uk/articles/restfully-delicious.html][this document]]. Note that
informations stored in XML /attributes/ indicates data that is only
given in output (that is, not needed when using =POST=, =UPDATE= or
=DELETE= methods)

*** Links
Links have the following attributes:
  - An /url/, pointing to the page bookmarked
  - A /title/, defaulted to the page's title
  - A /time/, corresponding to the save time of the link, represented
    using the [[http://tools.ietf.org/html/rfc3339][RFC3339]]
  - Some /notes/ about the link
  - Some /tags/

For example:
#+BEGIN_SRC none
<link>
  <url>http://cliki.net</url>
  <time>2011-02-27T16:57:33Z</time>
  <title>CLiki : index</title>
  <notes>The Common Lisp Wiki</notes>
  <tags>
    <tag href="/user/tags/lisp">
      lisp
    </tag>
    <tag href="/user/tags/cl">
      cl
    </tag>
  </tags>
</link>
#+END_SRC

*** Tags
For the moment, tags only have a name, and their represensation is
pretty simple:
#+BEGIN_SRC none
<tag>
  lisp
</tag>
#+END_SRC

*** Users
#+BEGIN_SRC none
<user>
  <username>foo</username>
  <time>2011-07-14T23:17:48.000000+02:00</time>
  <password>foobar</password>
  <links href="/users/foo/links"/>
</user>
#+END_SRC
Note that the password field won't be revealed by the server when
accessing an user information. It only should be given as input when
creating or modifying an user.

Obviously, the =time= value can't be changed by the user and thus is
not authorized when inputting an user representation.
** Operations
Every link and tag URI should be preceded by =/users/= and the
username, for example, if you want to access the tag =foo= of the user
=bar=, the URI would be =/users/bar/tags/foo=.

If the user specified does not exists, the server will return a =401= error.
*** Links
**** Get the list of the links
  - /URI/: =/links=
  - /Method/: =GET=
  - /Return codes/:
    - 200 and a list of links representation if everything went fine
**** Get informations about a link
  - /URI/: =/links/<url>=
  - /Method/: =GET=
  - /Return codes/:
    - 200 and a link representation if everything went fine
    - 404 if there's no link corresponding to =<url>=
**** Add a link
  - /URI/: =/links=
  - /Method/: =POST=
  - /Input/: A link representation
  - /Return codes/:
    - 201 and the link URI
    - 401 if the user is trying to add a link to another user's account
    - 415 if the representation isn't parsable
**** Modify a link
  - /URI/: =/links/<url>=
  - /Method/: =PUT=
  - /Input/: A link representation
  - /Return codes/:
    - 201 and the link URI
    - 401 if the user is trying to modify a link of another user
    - 404 if the link doesn't exists
    - 415 if the representation isn't parsable
**** Delete a link
  - /URI/: =/links/<url>=
  - /Method/: =DELETE=
  - /Return codes/:
    - 204 in case of success
    - 401 if the user is trying to delete a link of another user
    - 404 if the link doesn't exists
*** Tags
**** Get informations about a tag
  - /URI/: =/tags/<name>= where =<name>= is the name of the tag
  - /Method/: =GET=
  - /Return codes/:
    - 200 and a tag representation in case of success
    - 404 if the tag doesn't exists
**** Rename a tag
  - /URI/: =/tags/<name>=
  - /Method/: =PUT=
  - /Return codes/:
    - 204 and the new tag's URI
    - 401 if the user is trying to rename another user's tag
    - 404 if the tag doesn't exists
**** Delete a tag
  - /URI/: =/tags/<name>=
  - /Method/: =DELETE=
  - /Return codes/:
    - 204 in case of success
    - 401 if the user is trying to delete another use's tag
    - 404 if the tag doesn't exists
*** Users
**** Get the user list
  - /URI/: =/users=
  - /Method/: =GET=
  - /Output/: an user list representation
**** Get Informations about an user
  - /URI/: =/users/<username>=
  - /Method/: =GET=
  - /Output/ an user representation
**** Create a new user
  - /URI/: =/users=
  - /Method/: =POST=
  - /Input/: an user representation
  - /Return codes/:
    - 201 and the user's URI in case of success
    - 401 if the user already exists
    - 415 if the user representation isn't parsable
**** Modify an user
  - /URI/: =/users/<username>=
  - /Method/: =UPDATE= (implemented as =POST= for the moment)
  - /Input/: an user representation
  - /Return codes/:
    - 201 and the bookmark's URI in case of success
    - 401 if the user is trying to change his username to an already
      existing username or is trying to modify another user than himself
    - 415 if the user representation isn't parsable
**** Delete an user
  - /URI/: =/users/<username>=
  - /Method/: =DELETE=
  - /Return codes/:
    - 204 in case of success
    - 401 if the user is trying to delete another user than himself
